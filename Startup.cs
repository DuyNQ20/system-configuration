using System;
using System.IO;
using System.Reflection;
using Configuration.Data;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using Newtonsoft.Json.Serialization;
using ServiceCore.Extensions;
using ServiceCore.Filters;
using Swashbuckle.AspNetCore.Swagger;

namespace Configuration
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
            services.AddDbContext<DataContext>(options =>
              options.UseMySql(Configuration.GetConnectionString("MySqlConnection")));
              // options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

            services.Configure<ServiceConfiguration>(Configuration.GetSection("ServiceConfiguration"));
            services.AddSingleton(cfg => cfg.GetService<IOptions<ServiceConfiguration>>().Value);
            services.ConfigureErrorWrappingMiddleware(options => {
                options.ConfigureSerializer(serOpts => {
                    serOpts.ContractResolver = new CamelCasePropertyNamesContractResolver();
                });
            });
            services.AddSwaggerGen(options =>
            {
                options.SwaggerDoc("v1", new Info {
                    Version = "v1",
                    Title = "Web API",
                   // Description = "ASP.NET Core Web API",
                    TermsOfService = "None",
                    Contact = new Contact
                    {
                        Name = "TAN DAN., JSC",
                        Email = string.Empty,
                        Url = "https://tandan.com.vn"
                    },
                    License = new License
                    {
                        Name = "Use under LICX",
                        Url = "https://tandan.com.vn/license"
                    },

                });
                options.CustomSchemaIds(x => x.FullName);
                options.DocumentFilter<LowercaseDocumentFilter>();
               
                //Locate the XML file being generated by ASP.NET...
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                //... and tell Swagger to use those XML comments.
                options.IncludeXmlComments(xmlPath);
                options.OperationFilter<Models.FileUploadModel>();
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseHsts();
            }

            app.UseApiErrorWrapping();
            // Enable middleware to serve generated Swagger as a JSON endpoint.
            app.UseSwagger();
            //app.UseFileServer();
            // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.), 
            // specifying the Swagger JSON endpoint.
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "Catalog API V1");
            });


            app.UseHttpsRedirection();
            app.UseMvc();
            app.UseCors("CorsPolicy");
        }
    }
}
